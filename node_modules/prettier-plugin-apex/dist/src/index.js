"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultOptions = exports.options = exports.printers = exports.parsers = exports.languages = void 0;
const comments_1 = require("./comments");
const parser_1 = __importDefault(require("./parser"));
const pragma_1 = require("./pragma");
const printer_1 = __importDefault(require("./printer"));
const util_1 = require("./util");
exports.languages = [
    {
        name: "Apex",
        parsers: ["apex"],
        extensions: [".cls", ".trigger"],
        linguistLanguageId: 17,
        vscodeLanguageIds: ["apex"],
    },
    {
        name: "Apex Anonymous",
        parsers: ["apex-anonymous"],
        extensions: [".apex"],
        linguistLanguageId: 17,
        vscodeLanguageIds: ["apex-anon"],
    },
];
function locStart(node) {
    const location = node.loc ? node.loc : node.location;
    return location.startIndex;
}
function locEnd(node) {
    const location = node.loc ? node.loc : node.location;
    return location.endIndex;
}
exports.parsers = {
    apex: {
        astFormat: "apex",
        parse: parser_1.default,
        locStart,
        locEnd,
        hasPragma: pragma_1.hasPragma,
        preprocess: (text) => text.trim(),
    },
    "apex-anonymous": {
        astFormat: "apex",
        parse: parser_1.default,
        locStart,
        locEnd,
        hasPragma: pragma_1.hasPragma,
        preprocess: (text) => text.trim(),
    },
};
exports.printers = {
    apex: {
        print: printer_1.default,
        massageAstNode: util_1.massageAstNode,
        hasPrettierIgnore: comments_1.hasPrettierIgnore,
        insertPragma: pragma_1.insertPragma,
        isBlockComment: comments_1.isBlockComment,
        canAttachComment: comments_1.canAttachComment,
        printComment: comments_1.printComment,
        willPrintOwnComments: comments_1.willPrintOwnComments,
        handleComments: {
            ownLine: comments_1.handleOwnLineComment,
            endOfLine: comments_1.handleEndOfLineComment,
            remaining: comments_1.handleRemainingComment,
        },
    },
};
const CATEGORY_APEX = "apex";
exports.options = {
    apexStandaloneParser: {
        type: "choice",
        category: CATEGORY_APEX,
        default: "none",
        choices: [
            {
                value: "none",
                description: "Do not use a standalone parser",
            },
            {
                value: "built-in",
                description: "Use the built in HTTP standalone parser",
            },
        ],
        description: "Use a standalone process to speed up parsing. This process needs to be started and stopped separately from the Prettier process",
    },
    apexStandaloneHost: {
        type: "string",
        category: "Global",
        default: "localhost",
        description: "The standalone server host to connect to. Only applicable if apexStandaloneParser is true. Default to localhost.",
    },
    apexStandalonePort: {
        type: "int",
        category: CATEGORY_APEX,
        default: 2117,
        description: "The standalone server port to connect to. Only applicable if apexStandaloneParser is true. Default to 2117.",
    },
    apexInsertFinalNewline: {
        type: "boolean",
        category: CATEGORY_APEX,
        default: true,
        description: "Whether to insert one newline as the last thing in the output. Default to true.",
    },
};
exports.defaultOptions = {};
